const util = require('util'),
      debug = require('debug')('Mysql'),      
      operators = require('./operator.json');

function Builder(){

};

Builder.prototype.buildOr = function(object){
    const orArray = [];
    // object : { a: 1, b: 2 }
    for ( const condition of object )
        for ( const key in condition )
            orArray.push(this.buildSentence(key, condition[key], "=" ));
    return orArray.filter(item => item).join(" OR ");
};

Builder.prototype.destruct = function( field, object){

    const stringArray = [];

    if ( field == "$or" ){
        stringArray.push(withBracket(this.buildOr(object)));
    } else 
        for ( const key in object )
            stringArray.push(this.buildSentence(field, object[key], key));

    return stringArray.filter( item => item )
};

Builder.prototype.buildSentence = function( key, value, symbol ){

    const from = key.includes(".")? "": util.format("%s.", this.name);

    if ( symbol == "$in" )
        return util.format(`%s%s IN (%s)`, from, key, value.join(", ") );

    operator = operators[symbol];
    if ( operator == undefined || value == undefined )
        debug(util.format("Unknown operator %s", symbol));
    else {
        return util.format(`%s%s %s "%s"`, from, key, operator, value );
    }
        
};

Builder.prototype.buildCondition = function(){
    let stringArray = [];
    for ( const key in this._conditions ){
        if ( this._conditions[key] == undefined )
            continue;
        else if ( typeof this._conditions[key] != 'object' )
            stringArray.push( this.buildSentence(key, this._conditions[key], "=" ));
        else 
            stringArray = [].concat(stringArray, this.destruct(key, this._conditions[key]));
    };
    return stringArray.filter( item => item ).join(" AND ");
};

Builder.prototype.buildSort = function(){
    let sortArray = [];
    for ( const field in this._sort ){
        const from = field.indexOf(".") > -1? "": this.name + "."; 
        sortArray.push(`${from}${field} ${this._sort[field]<0?'DESC': ''}`);
    };
    return sortArray.join(', ');
};

Builder.prototype.buildJoin = function(){
    let joins = [];
    if ( !this._join ) return "";
    for ( const join of this._join )
        joins.push(`${join.type} ${join.table} ON ${this.name}.${join.primaryKey} = ${join.table}.${join.foreignKey}`);
    return joins.join(' ');
};

const withBracket = string => util.format("(%s)", string);

module.exports = exports = Builder;