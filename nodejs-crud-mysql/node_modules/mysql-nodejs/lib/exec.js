const debug = require('debug')('MySQL'),
      Joiner = require('./joiner'),
      bluebird = require('bluebird'),
      util = require('util');

function buildSelect(){
    
    const stringArray = [];

    if ( this._select.length < 1 )
        stringArray.push( util.format("%s.*", this.name ));
    else
        for ( const select of this._select )
            stringArray.push( util.format("%s.%s", this.name, select ));

    if ( this._join )
        for ( const join of this._join )
            if ( join.select )
                for ( const select of join.select.split(" ").filter(item => item.trim() != ""))
                    if ( join.group )
                        stringArray.push( util.format("%s.%s AS %s_%s", join.table, select, join.group, select));
                    else 
                        stringArray.push( util.format("%s.%s", join.table, select ));
            else
                stringArray.push( util.format("%s.*", join.table));

    return stringArray.filter(item => item).join(", ");
};

async function findExec() {
    
    let select, condition, query, join;

    select = buildSelect.bind(this)();
    condition = this.buildCondition();
    join = this.buildJoin();

    query = `SELECT ${select} FROM ${this.name} `;

    if ( this._join && join.trim() != "")
        query += `${join} `;

    if ( Object.keys(this._conditions).length > 0 && condition != "")
        query += `WHERE ${condition} `;

    query += this._sort? `ORDER BY ${this.buildSort()} `: "";            
    query += this._limit? `LIMIT ${this._limit} `: "";
    query += this._skip? `OFFSET ${this._skip} `: "";

    let results = await this.fromSQL(query);
        
    return results;
};

async function findOneExec(){
    let select, condition, query, join;

    select = buildSelect.bind(this)();
    condition = this.buildCondition();
    join = this.buildJoin();

    query = `SELECT ${select} FROM ${this.name} `;

    if ( this._join && join.trim() != "")
        query += `${join} `;
        
    if ( Object.keys(this._conditions).length > 0 && condition != "")
        query += `WHERE ${condition} `;

    const result = await this.fromSQL(query);
    return result[0];
};

async function CountExec(){
    let condition, query;
    condition = this.buildCondition();
    join = this.buildJoin();
    query = `SELECT COUNT(*) FROM ${this.name} `;

    if ( this._join && join.trim() != "")
        query += `${join} `;

    if ( Object.keys(this._conditions).length > 0 && condition != "")
        query += `WHERE ${condition} `;
    let count = await this.fromSQL(query);
    return count[0]["COUNT(*)"];
};

module.exports = {
    findExec: findExec,
    findOneExec: findOneExec,
    countExec: CountExec
}