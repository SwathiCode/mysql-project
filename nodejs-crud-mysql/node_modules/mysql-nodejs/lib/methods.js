const errors = require('./errors');

function select ( select ){
    select = typeof select == 'string'? select.split(' ') : select;
    this._select = select;
    return this;
};

function limit ( limit ){
    this._limit = limit;
    return this;
};

function skip ( skip ){
    this._skip = skip;
    return this;
};

function sort ( sort ){
    this._sort = sort;
    return this;
};

function populate(configs){

    if ( typeof configs !== "object" )
        throw new errors.InvalidParameter("configs should be object");
    
    configs = Array.isArray(configs)? configs: [ configs ];

    for ( const config of configs ){
        if ( config.ref === undefined || config.field === undefined || config.primaryKey === undefined )
            throw new errors.InvalidParameter("Populate field missing ");
        config.foreignKey = config.foreignKey? config.foreignKey: config.primaryKey;
    };

    this._populate = configs;
    
    return this;
};

function join( configs ){

    if ( typeof configs !== "object" )
        throw new errors.InvalidParameter("configs should be object");

    configs = Array.isArray(configs)? configs: [ configs ];

    for ( const config of configs ){
        if ( config.table === undefined || config.primaryKey === undefined )
            throw new errors.InvalidParameter("Join field missing ");
        config.foreignKey = config.foreignKey? config.foreignKey: config.primaryKey;
        config.type = config.type? config.type: "INNER JOIN";
    };;

    this._join = configs;

    return this;
};

module.exports = { 
    select : select,
    limit  : limit,
    skip   : skip,
    sort   : sort,
    populate: populate,
    join: join
};

