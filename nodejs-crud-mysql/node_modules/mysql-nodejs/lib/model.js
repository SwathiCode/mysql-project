const methods = require('./methods'),
      exec = require('./exec'),
      debug = require('debug')('MySQL'),
      util = require('util'),
      Builder = require('./buildSql/Builder');

function Model( name, connection ){
    this.name = name;
    this.connection = connection;
};

util.inherits(Model, Builder);

Model.prototype.fromSQL = async function(sql, retry=true){
    debug(sql);
    return new Promise((resolve, reject)=>{
        this.connection.pool.query( sql, async ( error, result ,field) => {
            if ( error )
                if ( retry ){
                    result = await this.fromSQL(sql, false);
                    return resolve(result);
                } else 
                    return reject(error);
            return resolve(result)
        });
    });
};

Model.prototype.find = function(conditions={}){
    // attributes
    this.action = "find";
    this._conditions = conditions;
    this._select = [];
    this._limit = null;
    this._skip = null;
    this._sort = null;
    this._populate = null;
    this._join = null;
    // methods
    this.select = methods.select;
    this.limit = methods.limit;
    this.skip = methods.skip;
    this.sort = methods.sort;
    this.populate = methods.populate;
    this.join = methods.join;
    // system methods
    this.exec = exec.findExec;
    // this.buildSort = buildSql.buildSort;
    // this.buildCondition = buildSql.buildCondition;
    // this.buildJoin = buildSql.buildJoin;
    return this;
};

Model.prototype.findOne = function(conditions={}){
    // attributes
    this.action = "findOne";
    this._conditions = conditions;
    this._select = [];
    this._populate = null;
    this._join = null;
    // methods
    this.populate = methods.populate;
    this.join = methods.join;
    // system methods
    this.exec = exec.findOneExec;
    // this.buildCondition = buildSql.buildCondition;
    // this.buildJoin = buildSql.buildJoin;
    return this;
};

Model.prototype.count = function(conditions={}){
    // attributes
    this.action = "count";
    this._conditions = conditions;
    this._join = null;
    // method
    this.join = methods.join;
    // system methods
    this.exec = exec.countExec;
    // this.buildCondition = buildSql.buildCondition;
    // this.buildJoin = buildSql.buildJoin;
    return this;
};


const model = ( name, Connection ) => ({
    find: ( conditions ) => new Model(name, Connection).find(conditions),
    findOne: ( conditions ) => new Model(name, Connection).findOne(conditions),
    count: ( conditions ) => new Model(name, Connection).count(conditions),
})

module.exports = { model };